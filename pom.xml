<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>liang</groupId>
  <artifactId>myBlog</artifactId>
  <packaging>war</packaging>
  <version>0.0.1-SNAPSHOT</version>
  <name>myBlog Maven Webapp</name>
  <url>https://github.com/emmerichLuang</url>

	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<net.spy.log.LoggerImpl>memcachedLog</net.spy.log.LoggerImpl>

		<spring.version>4.0.2.RELEASE</spring.version>
		<junit.version>4.4</junit.version>
		<servlet.version>3.0.1</servlet.version>
		<jackson.version>1.9.9</jackson.version>
		<fasterxml.jackson.version>2.1.0</fasterxml.jackson.version>		
		
		<jstl.version>1.2</jstl.version>
		<memcached.version>2.12.0</memcached.version>
		<log4j.version>1.2.9</log4j.version>
		<commonBeanUtils.version>1.8.3</commonBeanUtils.version> 
		<cglib.version>2.2.2</cglib.version>
		<druid.version>1.0.5</druid.version>
		<mysql.connector.version>5.1.30</mysql.connector.version>
		<c3p0.version>0.9.1.2</c3p0.version>
		<aspectj.version>1.6.12</aspectj.version>
		<guava.version>18.0</guava.version>
		<dom4j.version>1.6.1</dom4j.version>
		<jaxen.version>1.1.6</jaxen.version>
		<gson.version>2.2</gson.version>
	</properties>

	<!-- 依赖开始 -->
	<dependencies>
		<!-- 本地包 只能是system scope 
		<dependency>
			<groupId>uc.jws</groupId>
			<artifactId>jws</artifactId>
			<version>1.5.2</version>
			<scope>system</scope>
			<systemPath>${project.basedir}/localLib/jws-1.5.2.2.jar</systemPath>
		</dependency>
-->

		<!-- 配合dom4j。否则dom4j使用xpath的语法会出现异常情况 -->
		<dependency>
			<groupId>jaxen</groupId>
			<artifactId>jaxen</artifactId>
			<version>${jaxen.version}</version>
		</dependency>

		<dependency>
			<groupId>dom4j</groupId>
			<artifactId>dom4j</artifactId>
			<version>${dom4j.version}</version>
		</dependency>

		<dependency>
			<groupId>com.google.guava</groupId>
			<artifactId>guava</artifactId>
			<version>${guava.version}</version>
		</dependency>

		<!-- aspectj weaver -->
		<dependency>
			<groupId>org.aspectj</groupId>
			<artifactId>aspectjweaver</artifactId>
			<version>${aspectj.version}</version>
		</dependency>
		<dependency>
			<groupId>org.aspectj</groupId>
			<artifactId>aspectjrt</artifactId>
			<version>${aspectj.version}</version>
		</dependency>

		<dependency>
			<groupId>org.aopalliance</groupId>
			<artifactId>com.springsource.org.aopalliance</artifactId>
			<version>1.0.0</version>
		</dependency>

		<dependency>
			<groupId>mysql</groupId>
			<artifactId>mysql-connector-java</artifactId>
			<version>${mysql.connector.version}</version>
		</dependency>
		<dependency>
			<groupId>com.alibaba</groupId>
			<artifactId>druid</artifactId>
			<version>${druid.version}</version>
		</dependency>
		<dependency>
			<groupId>cglib</groupId>
			<artifactId>cglib-nodep</artifactId>
			<version>${cglib.version}</version>
		</dependency>

		<dependency>
			<groupId>commons-beanutils</groupId>
			<artifactId>commons-beanutils</artifactId>
			<version>${commonBeanUtils.version}</version>
		</dependency>

		<dependency>
			<groupId>net.spy</groupId>
			<artifactId>spymemcached</artifactId>
			<version>${memcached.version}</version>
		</dependency>

		<dependency>
			<groupId>log4j</groupId>
			<artifactId>log4j</artifactId>
			<version>${log4j.version}</version>
		</dependency>

		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>${junit.version}</version>
			<scope>test</scope>
		</dependency>

		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>javax.servlet-api</artifactId>
			<version>${servlet.version}</version>
			<scope>provided</scope>
		</dependency>

		<dependency>
			<groupId>jstl</groupId>
			<artifactId>jstl</artifactId>
			<version>${jstl.version}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-web</artifactId>
			<version>${spring.version}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-test</artifactId>
			<version>${spring.version}</version>
			<scope>test</scope>
		</dependency>

		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-oxm</artifactId>
			<version>${spring.version}</version>
		</dependency>

		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-tx</artifactId>
			<version>${spring.version}</version>
		</dependency>

		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-jdbc</artifactId>
			<version>${spring.version}</version>
		</dependency>

		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-aop</artifactId>
			<version>${spring.version}</version>
		</dependency>


		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-context</artifactId>
			<version>${spring.version}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-webmvc</artifactId>
			<version>${spring.version}</version>
		</dependency>

		<!-- spring mvc 用 @ResponseBody注解的话 用到这两个jackson包 -->
		<dependency>
			<groupId>org.codehaus.jackson</groupId>
			<artifactId>jackson-core-asl</artifactId>
			<version>${jackson.version}</version>
		</dependency>
		<dependency>
			<groupId>org.codehaus.jackson</groupId>
			<artifactId>jackson-mapper-asl</artifactId>
			<version>${jackson.version}</version>
		</dependency>
		<!-- 还是为了spring而设的 jackson包 -->
		<dependency>
			<groupId>com.fasterxml.jackson.core</groupId>
			<artifactId>jackson-core</artifactId>
			<version>${fasterxml.jackson.version}</version>	
		</dependency>
		<dependency>
			<groupId>com.fasterxml.jackson.core</groupId>
			<artifactId>jackson-databind</artifactId>
			<version>${fasterxml.jackson.version}</version>
		</dependency>
		<dependency>
			<groupId>com.fasterxml.jackson.core</groupId>
			<artifactId>jackson-annotations</artifactId>
			<version>${fasterxml.jackson.version}</version>
		</dependency>

	</dependencies>
	<!-- 依赖结束 -->

	<build>
		<!-- 表示有占位符的话，替换文件中的配置 -->
		<resources>
			<resource>
				<filtering>true</filtering>
				<directory>src/main/resources</directory>
			</resource>
		</resources>
		
		<plugins>
			<plugin>
				<artifactId>maven-compiler-plugin</artifactId>
				<configuration>
					<encoding>utf-8</encoding>
					<source>1.6</source>
					<target>1.6</target>
					<meminitial>128m</meminitial>
					<maxmem>512m</maxmem>
				</configuration>
				<version>2.3.2</version>
			</plugin>
			<plugin>
				<groupId>org.mortbay.jetty</groupId>
				<artifactId>maven-jetty-plugin</artifactId>
				<version>6.1.26RC0</version>
				<configuration>
					<!-- update jetty port -->
					<connectors>
						<connector implementation="org.mortbay.jetty.nio.SelectChannelConnector">
							<port>80</port>
							<maxIdleTime>60000</maxIdleTime>
						</connector>
					</connectors>
					<!-- interval 3 second if server have changed something ,then restart server 
						自动热部署
						默认值是 0。大于 0 的数值表示开启，0 表示关闭，单位为秒。以配置数值为一个周期，自动的扫描文件检查其内容是否有变化，如果发现文件的内容被改变，则自动重新部署运用。
						 -->
					<scanIntervalSeconds>2</scanIntervalSeconds>
					<contextPath>/</contextPath>
					<!-- jetty 默认开启了 useFileMappedBuffer。 在 jetty 运行期间，页面所使用的静态文件（如 css 
						文件等）不允许修改。 如果你尝试去修改它们，保存的时候就会出现 Save could not be completed 解决方案就是增加下面的webDefaultXml -->
					<webDefaultXml>src/test/resources/webdefault.xml</webDefaultXml>
					<!-- 默认automatic 
					设为 manual 的好处是，当你改变文件内容并保存时，不会马上触发自动扫描和重部署的动作。
					直至你在 Console 或命令行中敲回车键（Enter）的时候才触发重新加载的动作。 -->
					<reload>manual</reload>
				</configuration>
			</plugin>
			<plugin>
				<artifactId>maven-eclipse-plugin</artifactId>
				<version>2.8</version>
				<configuration></configuration>
			</plugin>
			<plugin>
				<artifactId>maven-resources-plugin</artifactId>
				<version>2.4.3</version>
				<configuration></configuration>
			</plugin>
			<plugin>
				<groupId>org.codehaus.cargo</groupId>
				<artifactId>cargo-maven2-plugin</artifactId>
				<version>1.0.3</version>
				<configuration></configuration>
			</plugin>
		</plugins>
	</build>
	
</project>
